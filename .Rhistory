mod5.1 <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + ch_bike,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(mod5.1, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs) # 0.7114
## ch_bike_den -> decrease
mod5.2 <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + ch_bike_den,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(mod5.2, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs) # 0.7307
## log.bike -> decrease
mod5.3 <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + log.bike,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(mod5.3, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs) # 0.7249
# AUC: 0.7525
# choose6: - central_nn / sub_nn -> sub_nn
## central_nn -> decrease
mod6.1 <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + central_nn,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(mod6.1, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs) # 0.7391
## sub_nn -> increase
mod6.2 <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + sub_nn,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(mod6.2, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs) # 0.7553
# Model results
final.mod <- glm(gentrified ~ crime + ch_crime + ch_crime_den + vacant.rate + pct.migration1yr + log.star_den + sub_nn,
data = dat.train,
na.action = na.exclude,
family = binomial("logit"))
testProbs <- data.frame(Outcome = as.factor(dat.test$gentrified),
Probs = predict(final.mod, dat.test, type= "response"))
pROC::auc(testProbs$Outcome, testProbs$Probs)
# plot ROC Curve
ggplot(testProbs, aes(d = as.numeric(Outcome), m = Probs)) +
geom_roc(n.cuts = 50, labels = T, colour = "#FE9900") +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
labs(title = "ROC Curve - clickModel")
# function from the book
iterateThresholds <- function(data, observedClass, predictedProbs, group) {
observedClass <- enquo(observedClass)
predictedProbs <- enquo(predictedProbs)
group <- enquo(group)
x = .01
all_prediction <- data.frame()
if (missing(group)) {
while (x <= 1) {
this_prediction <- data.frame()
this_prediction <-
data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1,0)) %>%
count(predclass, !!observedClass) %>%
summarize(Count_TN = sum(n[predclass==0 & !!observedClass==0]),
Count_TP = sum(n[predclass==1 & !!observedClass==1]),
Count_FN = sum(n[predclass==0 & !!observedClass==1]),
Count_FP = sum(n[predclass==1 & !!observedClass==0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Accuracy = (Count_TP + Count_TN) /
(Count_TP + Count_TN + Count_FN + Count_FP)) %>%
mutate(Threshold = round(x,2))
all_prediction <- rbind(all_prediction,this_prediction)
x <- x + .01
}
return(all_prediction)
}
else if (!missing(group)) {
while (x <= 1) {
this_prediction <- data.frame()
this_prediction <-
data %>%
mutate(predclass = ifelse(!!predictedProbs > x, 1,0)) %>%
group_by(!!group) %>%
count(predclass, !!observedClass) %>%
summarize(Count_TN = sum(n[predclass==0 & !!observedClass==0]),
Count_TP = sum(n[predclass==1 & !!observedClass==1]),
Count_FN = sum(n[predclass==0 & !!observedClass==1]),
Count_FP = sum(n[predclass==1 & !!observedClass==0]),
Rate_TP = Count_TP / (Count_TP + Count_FN),
Rate_FP = Count_FP / (Count_FP + Count_TN),
Rate_FN = Count_FN / (Count_FN + Count_TP),
Rate_TN = Count_TN / (Count_TN + Count_FP),
Accuracy = (Count_TP + Count_TN) /
(Count_TP + Count_TN + Count_FN + Count_FP)) %>%
mutate(Threshold = round(x, 2))
all_prediction <- rbind(all_prediction, this_prediction)
x <- x + .01
}
return(all_prediction)
}
}
# choose the threshold:
# baseline (threshold =0.5): sensitivity = 0.8120290, specificity = 0.5394175
# a better one: sensitivity increase > specificity decrease
whichThreshold <-
iterateThresholds(data=testProbs, observedClass = Outcome, predictedProbs = Probs)%>%
dplyr::select(Rate_TP, Rate_TN, Threshold)%>%
rename(Sensitivity = Rate_TP, Specificity = Rate_TN)
#plot sensitivity and specificity -> both have relative high value
# Both Sensitivity and Specificity >0.5 when Threshold = 0.12-0.2
whichThreshold %>%
select(Sensitivity, Specificity, Threshold)%>%
gather(Variable, Rate, -Threshold) %>%
ggplot(.,aes(Threshold, Rate, colour = Variable)) +
geom_point() +
scale_colour_manual(values = palette2) +
labs(title = "Specificity and Sensitivity by threshold",
y = "Rate") +
guides(colour=guide_legend(title = "Rate"))+
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Test probabilities
testProbs <- testProbs %>%
mutate(predOutcome  = as.factor(ifelse(Probs >= 0.18, "1", "0")))
100 * prop.table(table(Observed = testProbs$Outcome, Predicted = testProbs$predOutcome), margin = 1)
model_summary <- summary(final.mod)$coefficients
model_df <- as.data.frame(model_summary)
# Manually add stars to coefficients based on p-values
model_df$Significance <- ifelse(model_summary[,4] < 0.001, "***",
ifelse(model_summary[,4] < 0.01, "**",
ifelse(model_summary[,4] < 0.05, "*", "")))
# Combine Estimate and Significance into a single column for aesthetic purposes
model_df$Estimate <- paste0(sprintf("%.3f", model_df$Estimate),
model_df$Significance)
# Now use kable to create the table
kable(model_df[, -5], format = "html", digits = 3, caption = "Summary of Final Model") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
column_spec(1, bold = T)
testProbs <-
testProbs %>%
mutate(predOutcome  = as.factor(ifelse(testProbs$Probs > 0.18 , 1, 0)))
conf_matrix <- table(observed = testProbs$Outcome, predicted = testProbs$predOutcome)
conf_matrix
100 * prop.table(table(Observed = testProbs$Outcome, Predicted = testProbs$predOutcome), margin = 1)
View(whichThreshold)
dat.mod20 <- full.dat %>%
as.data.frame() %>%
select(contains("20"), log.park_in, log.park_touch, name, sub_nn) %>%
filter_all(all_vars(!is.na(.))) %>%
rename(gentrified = gentrified20,
crime = crime20,
ch_crime = ch_crime20,
log.crime_den = log.crime20_den,
ch_crime_den = ch_crime20_den,
log.star = log.star20,
ch_star = ch_star20,
log.star_den = log.star20_den,
ch_star_den = ch_star20_den,
log.bike = log.bike20,
ch_bike = ch_bike20,
log.bike_den = log.bike20_den,
ch_bike_den = ch_bike20_den,
log.struc5yrs = log.struc5yrs20,
log.pct.struc5yrs = log.pct.struc5yrs20,
pct.migration1yr = pct.migration1yr20,
vacant.rate = vacant.rate20,
ch_vacant_rate = ch_vacant_rate20,
inc_level = inc_level20,
edu_level = edu_level20,
dom_white = dom_white20,
dom_hispanic = dom_hispanic20)
dat.mod20$gentrified <- relevel(as.factor(dat.mod20$gentrified), ref = "0")
#dont need to split dataset since using model directly for testing
testProbs20 <- data.frame(Outcome = as.factor(dat.mod20$gentrified),
Probs = predict(final.mod, dat.mod20, type= "response"))### Test probabilities
pROC::auc(testProbs20$Outcome, testProbs20$Probs) # 0.6747
ggplot(testProbs20, aes(d = as.numeric(Outcome), m = Probs)) +
geom_roc(n.cuts = 50, labels = T, labelsize = 3,labelround = 2,colour = "#FE9900") +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1.5, color = 'grey') +
labs(title = "ROC Curve - clickModel") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
testProbs20 <-
testProbs20 %>%
mutate(predOutcome  = as.factor(ifelse(testProbs20$Probs >= 0.18 , 1, 0)))
conf_matrix20 <- table(observed = testProbs20$Outcome, predicted = testProbs20$predOutcome)
conf_matrix20
100 * prop.table(table(Observed = testProbs20$Outcome, Predicted = testProbs20$predOutcome), margin = 1)
View(testProbs)
View(testProbs.thresholds2)
#cross validation across neighborhoods
testProbs2 <-
data.frame(class = as.numeric(as.character(dat.test$gentrified)),
probs = predict(final.mod, dat.test, type = "response"),
Neighborhood = dat.test$name)
testProbs.thresholds2 <-
iterateThresholds(data = testProbs2, observedClass = class,
predictedProbs = probs, group = Neighborhood)
#create a table to understand the rates across neighborhoods?
map_testProbs.thresholds2 <- testProbs.thresholds2 %>%
filter(Threshold == 0.18) %>%
group_by(Neighborhood) %>%
summarize(Rate_TP = mean(Rate_TP),
Rate_FP = mean(Rate_FP),
Rate_FN = mean(Rate_FN),
Rate_TN = mean(Rate_TN))
map_testProbs.thresholds2[is.na(map_testProbs.thresholds2)] <- 0
# map
map_testProbs.thresholds2 %>%
gather(Variable, value, -Neighborhood)%>%
left_join(full.dat %>% select(name, geometry),
by = c('Neighborhood' = 'name'))%>%
st_as_sf()%>%
ggplot() +
geom_sf(aes(fill = value)) +
facet_wrap(~Variable) +
scale_fill_viridis() +
labs(title = "Confusion matrix rates by neighborhoods - 2015") +
mapTheme() + theme(panel.border = element_rect(colour = "black", fill=NA, size=0.6),
strip.text.x = element_text(size = 10))
testProbs3 <-
data.frame(class = as.character(dat.test$gentrified),
probs = predict(final.mod, dat.test, type = "response"),
income = dat.test$inc_level)
# plot error by income
testProbs.thresholds3 <-
iterateThresholds(data=testProbs3, observedClass = class,
predictedProbs = probs, group = income)
filter(testProbs.thresholds3, Threshold == 0.18)  %>%
dplyr::select(Accuracy, income, starts_with("Rate")) %>%
gather(Variable, Value, -income) %>%
ggplot(aes(Variable, Value, fill = income)) +
geom_bar(aes(fill = income), position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette4) +
labs(title="Confusion matrix rates by income levels - 2015",
subtitle = "Threshold = 0.18", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
testProbs4 <-
data.frame(class = as.character(dat.test$gentrified),
probs = predict(final.mod, dat.test, type = "response"),
education = dat.test$edu_level)
# plot error by income
testProbs.thresholds4 <-
iterateThresholds(data=testProbs4, observedClass = class,
predictedProbs = probs, group = education)
filter(testProbs.thresholds4, Threshold == 0.18)  %>%
dplyr::select(Accuracy, education, starts_with("Rate")) %>%
gather(Variable, Value, -education) %>%
ggplot(aes(Variable, Value, fill = education)) +
geom_bar(aes(fill = education), position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette4) +
labs(title="Confusion matrix rates by education levels - 2015",
subtitle = "Threshold = 0.18", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(testProbs.thresholds4)
#predominantly white or not
testProbs5 <-
data.frame(class = as.character(dat.test$gentrified),
probs = predict(final.mod, dat.test, type = "response"),
dominant_white = dat.test$dom_white)
## plot error
testProbs.thresholds5 <-
iterateThresholds(data=testProbs5, observedClass = class,
predictedProbs = probs, group = dominant_white)
filter(testProbs.thresholds5, Threshold == 0.18)  %>%
dplyr::select(Accuracy, dominant_white, starts_with("Rate")) %>%
gather(Variable, Value, -dominant_white) %>%
ggplot(aes(Variable, Value, fill = dominant_white)) +
geom_bar(aes(fill = dominant_white),
position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette2) +
labs(title="Confusion matrix rates by predominantly white or not - 2015",
subtitle = "Threshold = 0.18", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#predominantly hispanic or not
testProbs6 <-
data.frame(class = as.character(dat.test$gentrified),
probs = predict(final.mod, dat.test, type = "response"),
dominant_hispanic = dat.test$dom_hispanic)
# plot error by income
testProbs.thresholds6 <-
iterateThresholds(data=testProbs6, observedClass = class,
predictedProbs = probs, group = dominant_hispanic)
filter(testProbs.thresholds6, Threshold == 0.18)  %>%
dplyr::select(Accuracy, dominant_hispanic, starts_with("Rate")) %>%
gather(Variable, Value, -dominant_hispanic) %>%
ggplot(aes(Variable, Value, fill = dominant_hispanic)) +
geom_bar(aes(fill = dominant_hispanic),
position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette2) +
labs(title="Confusion matrix rates by predominantly Hispanic or not - 2015",
subtitle = "Threshold = 0.18", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
testProbs20 <-
testProbs20 %>%
mutate(predOutcome  = as.factor(ifelse(testProbs20$Probs >= 0.18 , 1, 0)))
conf_matrix20 <- table(observed = testProbs20$Outcome, predicted = testProbs20$predOutcome)
conf_matrix20
100 * prop.table(table(Observed = testProbs20$Outcome, Predicted = testProbs20$predOutcome), margin = 1)
#cross validation across neighborhoods
testProbs2.20 <-
data.frame(class = as.numeric(as.character(dat.mod20$gentrified)),
probs = predict(final.mod, dat.mod20, type = "response"),
Neighborhood = dat.mod20$name)
testProbs.thresholds2.20 <-
iterateThresholds(data=testProbs2.20, observedClass = class,
predictedProbs = probs, group = Neighborhood)
map_testProbs.thresholds2.20 <- testProbs.thresholds2.20 %>%
filter(Threshold == 0.15) %>%
group_by(Neighborhood) %>%
summarize(Rate_TP = mean(Rate_TP),
Rate_FP = mean(Rate_FP),
Rate_FN = mean(Rate_FN),
Rate_TN = mean(Rate_TN))
# map
map_testProbs.thresholds2.20 %>%
gather(Variable, value, -Neighborhood)%>%
left_join(full.dat %>% select(name, geometry),
by = c('Neighborhood' = 'name'))%>%
st_as_sf()%>%
ggplot() +
geom_sf(aes(fill = value)) +
facet_wrap(~Variable) +
scale_fill_viridis() +
labs(title = "Confusion matrix rates by neighborhoods - 2020") +
mapTheme() + theme(panel.border = element_rect(colour = "black", fill=NA, size=0.6),
strip.text.x = element_text(size = 10))
testProbs3.20 <-
data.frame(class = as.character(dat.mod20$gentrified),
probs = predict(final.mod, dat.mod20, type = "response"),
income = dat.mod20$inc_level)
# plot error by income
testProbs.thresholds3.20 <-
iterateThresholds(data=testProbs3.20, observedClass = class,
predictedProbs = probs, group = income)
filter(testProbs.thresholds3.20, Threshold == 0.15)  %>%
dplyr::select(Accuracy, income, starts_with("Rate")) %>%
gather(Variable, Value, -income) %>%
ggplot(aes(Variable, Value, fill = income)) +
geom_bar(aes(fill = income), position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette4) +
labs(title="Confusion matrix rates by income levels - 2020",
subtitle = "Threshold = 0.15", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
testProbs4.20 <-
data.frame(class = as.character(dat.mod20$gentrified),
probs = predict(final.mod, dat.mod20, type = "response"),
education = dat.mod20$edu_level)
# plot error by income
testProbs.thresholds4.20 <-
iterateThresholds(data=testProbs4.20, observedClass = class,
predictedProbs = probs, group = education)
filter(testProbs.thresholds4.20, Threshold == 0.15)  %>%
dplyr::select(Accuracy, education, starts_with("Rate")) %>%
gather(Variable, Value, -education) %>%
ggplot(aes(Variable, Value, fill = education)) +
geom_bar(aes(fill = education), position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette4) +
labs(title="Confusion matrix rates by education levels - 2020",
subtitle = "Threshold = 0.15", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#predominantly white or not
testProbs5.20 <-
data.frame(class = as.character(dat.mod20$gentrified),
probs = predict(final.mod, dat.mod20, type = "response"), #replace with final model
dominant_white = dat.mod20$dom_white)
# plot error by income
testProbs.thresholds5.20 <-
iterateThresholds(data=testProbs5.20, observedClass = class,
predictedProbs = probs, group = dominant_white)
filter(testProbs.thresholds5.20, Threshold == 0.15)  %>%
dplyr::select(Accuracy, dominant_white, starts_with("Rate")) %>%
gather(Variable, Value, -dominant_white) %>%
ggplot(aes(Variable, Value, fill = dominant_white)) +
geom_bar(aes(fill = dominant_white),
position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette2) +
labs(title="Confusion matrix rates by predominantly white or not - 2020",
subtitle = "Threshold = 0.15", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#predominantly hispanic or not
testProbs6.20 <-
data.frame(class = as.character(dat.mod20$gentrified),
probs = predict(final.mod, dat.mod20, type = "response"), #replace with final model
dominant_hispanic = dat.mod20$dom_hispanic)
# plot error by income
testProbs.thresholds6.20 <-
iterateThresholds(data=testProbs6.20, observedClass = class,
predictedProbs = probs, group = dominant_hispanic)
filter(testProbs.thresholds6.20, Threshold == 0.15)  %>%
dplyr::select(Accuracy, dominant_hispanic, starts_with("Rate")) %>%
gather(Variable, Value, -dominant_hispanic) %>%
ggplot(aes(Variable, Value, fill = dominant_hispanic)) +
geom_bar(aes(fill = dominant_hispanic),
position = "dodge", stat = "identity",colour = "white") +
geom_text(aes(label = sprintf("%.2f", Value)),                      # Add labels
position = position_dodge(width = 0.9), vjust = -0.5, size = 3) +
scale_fill_manual(values = palette2) +
labs(title="Confusion matrix rates by predominantly Hispanic or not - 2015",
subtitle = "Threshold = 0.15", x = "Outcome",y = "Rate") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold")) +
theme(legend.title = element_text(size = 9),
legend.text = element_text(size = 8)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
testProbs20 <-
testProbs20 %>%
mutate(predOutcome  = as.factor(ifelse(testProbs20$Probs >= 0.15 , 1, 0)))
conf_matrix20 <- table(observed = testProbs20$Outcome, predicted = testProbs20$predOutcome)
conf_matrix20
100 * prop.table(table(Observed = testProbs20$Outcome, Predicted = testProbs20$predOutcome), margin = 1)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE,
dpi = 300)
options(scipen = 999)
if(!require(pacman)){install.packages("pacman"); library(pacman)}
p_load(tidyverse, sf, units, nngeo, tmap, tinytex, kableExtra, janitor, classInt,
patchwork, here, tidycensus, lwgeom, lsr, haven, descr, RColorBrewer, stargazer,
car, FNN, GGally, MASS, ISLR2, spdep, caret, ckanr, grid, gridExtra, ggcorrplot,
jtools, broom, tufte, rmarkdown, corrr, RSocrata, viridis, spatstat, raster, knitr,
rvest, pROC, ipumsr, stringr, cluster, factoextra, tidytext,yardstick, rsample,
glmnet, ggplot2, plotROC)
library(conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
palette2 <- c("lightsalmon2","paleturquoise3")
palette3 <- c("lightsalmon2","paleturquoise3","steelblue4")
palette4 <- c("navajowhite","lightsalmon2","paleturquoise3","steelblue4")
## Bike Share
# origin
bike.13 <- read_csv(here::here('data/raw/Divvy_Stations_2013.csv'))
bike.15 <- read_csv(here::here('data/raw/Divvy_Stations_2015.csv'))
bike.20 <- read_csv(here::here('data/raw/Divvy_Stations_2020.csv'))
View(bike.20)
View(bike.20)
bike.20 <- read_csv(here::here('data/raw/202008-divvy-tripdata.zip'))
bike.20 <- read_csv(here::here('data/raw/202008-divvy-tripdata.zip/Divvy_Stations_2020.csv'))
bike.20 <- read_csv(unz(here::here('data/raw/202008-divvy-tripdata.zip'), '202008-divvy-tripdata.csv'))
bike.20 <- read_csv(here::here('data/raw/202008-divvy-tripdata.zip/Divvy_Stations_2020.csv'))
bike.20 <- read_csv(unz(here::here('data/raw/202008-divvy-tripdata.zip'), '202008-divvy-tripdata.csv'))
bike.20 <- read_csv(unz(here::here('data/raw/202008-divvy-tripdata.zip'), '202008-divvy-tripdata.csv'))
